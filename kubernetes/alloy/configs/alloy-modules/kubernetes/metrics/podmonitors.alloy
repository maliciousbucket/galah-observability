declare "podmonitors_scrape" {
	argument "forward_to" {
		comment  = "Must be a list(MetricssReceiver) where collected metrics should be forwarded to"
		optional = false
	}

	argument "keep_metrics" {
		comment  = "A regex of metrics to keep (default: (.+))"
		optional = true
	}

	argument "drop_metrics" {
		comment  = "A regex of metrics to drop (default: \"\")"
		optional = true
	}

	argument "scrape_interval" {
		comment  = "How often to scrape metrics from the targets (default: 60s)"
		optional = true
	}

	argument "scrape_timeout" {
		comment  = "How long before a scrape times out (default: 10s)"
		optional = true
	}

	prometheus.operator.podmonitors "scrape" {
		forward_to = [prometheus.relabel.podmonitors.receiver]

		scrape {
			default_scrape_interval = coalesce(argument.scrape_interval.value, "60s")
			default_scrape_timeout  = coalesce(argument.scrape_timeout.value, "10s")
		}

		clustering {
			enabled = false
		}
	}

	prometheus.relabel "podmonitors" {
		forward_to = argument.forward_to.value

		// keep only metrics that match the keep_metrics regex
		rule {
			action        = "keep"
			source_labels = ["__name__"]
			regex         = coalesce(argument.keep_metrics.value, "(.+)")
		}

		// drop metrics that match the drop_metrics regex
		rule {
			action        = "drop"
			source_labels = ["__name__"]
			regex         = coalesce(argument.drop_metrics.value, "")
		}
	}
}
