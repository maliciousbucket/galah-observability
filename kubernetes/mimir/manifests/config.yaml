apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: mimir
    app.kubernetes.io/instance: mimir
    app.kubernetes.io/managed-by: Kustomize
    app.kubernetes.io/name: mimir
    app.kubernetes.io/version: 2.13.0
  name: mimir
  namespace: galah-monitoring
---
apiVersion: v1
data:
  alertmanager-fallback-config.yaml: |-
    global:
      resolve_timeout: 5m
    route:
      receiver: default
      group_by:
        - alertname
        - service
        - cluster
      group_wait: 30s
      group_interval: 5m
    receivers:
      - name: default
    templates: []
  mimir.yaml: "# TODO : Query front-end, alerts, recording rules,\n\nmultitenancy_enabled:
    false\nserver:\n\n  http_listen_port: 9090\n  grpc_listen_port: 9095\n\n  log_level:
    info\n\n\nmemberlist:\n  join_members: [ mimir-memberlist:7946 ]\n\n#\n#api:\n#
    \ prometheus_http_prefix: ''\n#\n\n#distributor:\n#\n#  ring:\n#    #TODO: Set
    to env\n#    instance_addr: 127.0.0.1\n#\n#    kvstore:\n#      store: memberlist\n\ningester:\n\n
    \ ring:\n    #    instance_addr: 127.0.0.1\n\n    kvstore:\n      store: inmemory\n
    \   # TODO: Consider running more than one, default is 3\n    replication_factor:
    1\n\nalertmanager:\n  data_dir: /data/alertmanager\n  enable_api: true\n  external_url:
    /alertmanager\n  fallback_config_file: /etc/mimir/configs/alertmanager-fallback-config.yaml\nalertmanager_storage:\n
    \ s3:\n    bucket_name: mimir-alertmanager\n\n#memberlist:\n#  join_members: [mimir-memberlist:7946]\n\n\nstore_gateway:\n\n
    \ sharding_ring:\n \n    replication_factor: 1\n\ncommon:\n  storage:\n    backend:
    s3\n    s3:\n      endpoint: ${MIMIR_S3_ENDPOINT:minio.minio-store.svc:443}\n
    \     access_key_id: ${MIMIR_S3_ACCESS_KEY_ID:bucket}\n      secret_access_key:
    ${MIMIR_S3_SECRET_ACCESS_KEY:supersecret}\n      insecure: ${MIMIR_S3_INSECURE:false}\n
    \     http:\n        insecure_skip_verify: true\n\nblocks_storage:\n  s3:\n    bucket_name:
    mimir-blocks\n  #TODO: Consider using an S3 or something\n  backend: filesystem\n\n#
    \ bucket_store:\n#    sync_dir: /tmp/mimir/tsdb-sync\n#\n#  filesystem:\n#    dir:
    /tmp/mimir/data/tsdb\n\n  tsdb:\n    dir: /data/ingester\n    ship_interval: 1m\n
    \   block_ranges_period: [ 1h ]\n    retention_period: 3h\n\nruler:\n  rule_path:
    /data/rules\n  enable_api: true\n  alertmanager_url: http://localhost:9090/alertmanager\n#
    \ alertmanager_url: http://mimir-backend:9090/alertmanager\n\n\n\nruler_storage:\n
    \ s3:\n    bucket_name: mimir-ruler\n\ncompactor:\n  compaction_interval: 30s\n
    \ data_dir: /tmp/mimir-compactor\n  cleanup_interval: 1m\n  tenant_cleanup_delay:
    1m\n\n\n\nlimits:\n\n  max_global_exemplars_per_user: 100000\n  ingestion_rate:
    30000\n  native_histograms_ingestion_enabled: true\n\noverrides_exporter:\n  ring:\n
    \   enabled: true\n    wait_stability_min_duration: 30s\n\n#query_scheduler:\n#
    \ service_discovery_mode: \"ring\"\n#\nruntime_config:\n  file: /etc/mimir/configs/runtime.yaml\n\nusage_stats:\n
    \ enabled: false\n\n\n"
  runtime.yaml: |-
    #TODO: Adjust
    ingester_limits:
      max_ingestion_rate: 20000
      max_series: 1500000
      max_tenants: 1000
      max_inflight_push_requests: 30000

    distributor_limits:
      max_ingestion_rate: 20000
      max_inflight_push_requests: 30000
      max_inflight_push_requests_bytes: 50000000

    overrides:
      anonymous:
        max_global_series_per_user: 1500000
        max_fetched_series_per_query: 100000
        native_histograms_ingestion_enabled: true
        ruler_max_rules_per_rule_group: 50
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: mimir
    app.kubernetes.io/instance: mimir
    app.kubernetes.io/managed-by: Kustomize
    app.kubernetes.io/name: mimir
    app.kubernetes.io/version: 2.13.0
  name: mimir-config-6k4fd5tf89
  namespace: galah-monitoring
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: mimir
    app.kubernetes.io/instance: mimir
    app.kubernetes.io/managed-by: Kustomize
    app.kubernetes.io/name: mimir
    app.kubernetes.io/version: 2.13.0
  name: mimir
  namespace: galah-monitoring
spec:
  ports:
  - name: http-metrics
    port: 9090
    targetPort: 9090
  - name: grpc-dist
    port: 9095
    targetPort: 9095
  selector:
    app.kubernetes.io/component: mimir
    app.kubernetes.io/instance: mimir
    app.kubernetes.io/name: mimir
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: mimir
    app.kubernetes.io/instance: mimir
    app.kubernetes.io/managed-by: Kustomize
    app.kubernetes.io/name: mimir
    app.kubernetes.io/version: 2.13.0
    prometheus.io/service-monitor: "false"
  name: mimir-member-list
  namespace: galah-monitoring
spec:
  clusterIP: None
  ports:
  - appProtocol: tcp
    port: 7946
    protocol: TCP
    targetPort: 7946
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/component: mimir
    app.kubernetes.io/instance: mimir
    app.kubernetes.io/name: mimir
    app.kubernetes.io/part-of: memberlist
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: mimir
    app.kubernetes.io/instance: mimir
    app.kubernetes.io/managed-by: Kustomize
    app.kubernetes.io/name: mimir
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: 2.13.0
  name: mimir
  namespace: galah-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: mimir
      app.kubernetes.io/instance: mimir
      app.kubernetes.io/name: mimir
      app.kubernetes.io/part-of: memberlist
  template:
    metadata:
      annotations:
        logs.grafana.com/scrape: "true"
      labels:
        app.kubernetes.io/component: mimir
        app.kubernetes.io/instance: mimir
        app.kubernetes.io/name: mimir
        app.kubernetes.io/part-of: memberlist
    spec:
      containers:
      - args:
        - -target=all,alertmanager
        - -config.file=/etc/mimir/configs/mimir.yaml
        - -config.expand-env=true
        - -alertmanager.enable-api=true
        - -memberlist.bind-addr=$(POD_IP)
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: docker.io/grafana/mimir-alpine:2.13.0
        imagePullPolicy: IfNotPresent
        name: mimir
        ports:
        - containerPort: 9090
          name: http-metrics
        - containerPort: 9095
          name: grpc-dist
        - containerPort: 7946
          name: http-memberlist
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
        resources:
          limits:
            cpu: 990m
            memory: 1Gi
          requests:
            cpu: 200m
            memory: 256Mi
        volumeMounts:
        - mountPath: /etc/mimir/configs
          name: config
        - mountPath: /data
          name: storage
      terminationGracePeriodSeconds: 60
      volumes:
      - configMap:
          name: mimir-config-6k4fd5tf89
        name: config
      - emptyDir: {}
        name: storage
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    app.kubernetes.io/component: mimir
    app.kubernetes.io/instance: mimir
    app.kubernetes.io/managed-by: Kustomize
    app.kubernetes.io/name: mimir
    app.kubernetes.io/version: 2.13.0
  name: mimir
  namespace: galah-monitoring
spec:
  endpoints:
  - port: http-metrics
    relabelings:
    - replacement: galah-monitoring/mimir
      sourceLabels:
      - job
      targetLabel: job
    scheme: http
  namespaceSelector:
    matchNames:
    - galah-monitoring
  selector:
    matchExpressions:
    - key: prometheus.io/service-monitor
      operator: NotIn
      values:
      - "false"
    matchLabels:
      app.kubernetes.io/component: mimir
      app.kubernetes.io/instance: mimir
      app.kubernetes.io/name: mimir
