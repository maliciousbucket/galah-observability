# nonk8s
apiVersion: k3d.io/v1alpha5
kind: Simple
metadata:
  name: galah-monitoring
servers: 1
agents: 2
kubeAPI:
  hostIP: "127.0.0.1"
  hostPort: "6445"
image: rancher/k3s:v1.30.5-k3s1
ports:
#  - port: 8080:8080
#    nodeFilters:
#      - loadbalancer
#  - port: 80:80
#    nodeFilters:
#      - loadbalancer
  - port: 8083:80 # same as `--port '8080:81@loadbalancer'`
    nodeFilters:
      - loadbalancer



  - port: 8443:443
    nodeFilters:
      - loadbalancer
  - port: 8082:80
    nodeFilters:
      - loadbalancer
  - port: 3000:80
    nodeFilters:
      - loadbalancer
  - port: 12345:31128
    nodeFilters:
      - loadbalancer
  - port: 30080:30080
    nodeFilters:
      - loadbalancer
  - port: 30443:30443
    nodeFilters:
      - loadbalancer
  - port: 30335:30335
    nodeFilters:
      - loadbalancer
  - port: 30100-30120:30100-30120
    nodeFilters:
      - loadbalancer




env:
  - envVar: NO_PROXY=localhost,127.0.0.1
    nodeFilters:
      - server:0
      - agent:*

files:
- description: "Pre-installed Prometheus Operator CRDs"
  source: prom-operator-crds/manifests/config.yaml
  destination: k3s-manifests-custom/prometheus-operator-crds-config.yaml
- description: "Pre-installed Cert-Manager CRDs"
  source: cert-manager/manifests/config.yaml
  destination: k3s-manifests-custom/cert-manager-config.yaml
- description: "Pre-installed Kube State Metrics CRDs"
  source: kube-state-metrics/manifests/config.yaml
  destination: k3s-manifests-custom/kube-state-metrics-config.yaml

registries:
  create:
    name: k3d-reg-docker-io
    host: 0.0.0.0
    hostPort: "5000"
    proxy:
      remoteURL: https://registry-1.docker.io
      username: ""
      password: ""
    volumes:
      - /tmp/reg-docker-io:/var/lib/registry
  config: |
    mirrors:
      "docker.io":
        endpoint:
        - http://host.k3d.internal:5000
        - http://k3d-reg-docker-io:5000
    
    

#hostAliases:
#  - ip: 127.0.0.1
#    hostnames:
#      - host.local
#      - galah.local
#      - galah.alloy
#      - galah.grafana
#      - alloy.local
options:
  k3d:
    wait: true
    timeout: "60s"
    disableLoadbalancer: false
    disableImageVolume: false
    disableRollback: false
  kubeconfig:
    updateDefaultKubeconfig: true
    switchCurrentContext: true
  k3s:
    extraArgs:
      - arg: --tls-san=127.0.0.1
        nodeFilters:
          - server:*
#      - arg: -p "30000-32767:30000-32767"
#        nodeFilters:
#            - server:0
#    nodeLabels: []


